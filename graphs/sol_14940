#include <bits/stdc++.h>
#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(nullptr);                 \
    cout.tie(nullptr);

using namespace std;

int n, m;
int maps[1001][1001];
bool isVisited[1001][1001];
int dist[1001][1001]; // 거리 저장할 배열
queue<pair<int, int>> q;
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };

void bfs(void) {
    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;

        q.pop();

        // 동서남북 한 칸 씩 탐색
        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            // 맵의 범위를 벗어나지 않고 방문하지 않았으면서 갈 수 있는 곳이면
            if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                if (!isVisited[nx][ny] && maps[nx][ny] == 1) {
                    dist[nx][ny] = dist[x][y] + 1; // 이전 거리에서 + 1
                    isVisited[nx][ny] = true;
                    q.push(make_pair(nx, ny));
                }
            }
        }
    }
}

int main() {
    cin >> m >> n;

    // 맵 입력받기
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> maps[i][j];
            if (maps[i][j] == 2) {
                q.push(make_pair(i, j));
            }
        }
    }

    bfs();

    // 거리 출력
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            // 갈 수 없는 땅이면 -1 출력
            if (dist[i][j] == 0 && maps[i][j] == 1) {
                dist[i][j] = -1;
            }
            cout << dist[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}
