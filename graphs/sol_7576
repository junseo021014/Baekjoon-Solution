#include <bits/stdc++.h>
#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(nullptr);                 \
    cout.tie(nullptr);

using namespace std;

int n, m;
int tomato[1001][1001];
bool isVisited[1001][1001];
int dx[] = { 0, 0, -1, 1 };
int dy[] = { -1, 1, 0, 0 };
queue<pair<int, int>>q; // int 형 pair 객체 큐 생성

void bfs(void) {
    while (!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        
        q.pop(); // 맨 앞 큐 요소 삭제

        // 동서남북으로 1칸씩 이동하며 탐색
        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            // 범위를 벗어나지 않고 방문 안했으며 안 익은 토마토가 있는 칸을 탐색
            if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                if (!isVisited[nx][ny] && tomato[nx][ny] == 0) {
                    isVisited[nx][ny] = true;
                    tomato[nx][ny] = tomato[x][y] + 1;
                    q.push(make_pair(nx, ny));
                }
            }
        }
    }
}

int main() {
    cin >> m >> n;

    // 상자에 토마토 입력받기
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> tomato[i][j];
            // 익은 토마토라면 큐로
            if (tomato[i][j] == 1) {
                q.push(make_pair(i, j));
            }
        }
    }

    bfs();

    // 토마토가 모두 익었는지 확인
    int cnt = 0; // 토마토가 모두 익을 때까지의 최소 날짜
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            // 안 익은 토마토가 있다면 -1 출력
            if (tomato[i][j] == 0) { 
                cout << -1;
                return 0;
            }
            // 제일 마지막에 익은 토마토까지 걸린 일수를 저장
            else if (cnt < tomato[i][j]) {
                cnt = tomato[i][j];
            }
        }
    }

    cout << (cnt - 1);

    return 0;
}
